'$$$ Author: Fabien H. Dimitrov $$$'
'$$$ Context: Codeboxx Week 1 (Odyssey) $$$'
====================================================================================================================================================
~~~MAIN~~~
====================================================================================================================================================
'Globals'
SET numColumns TO 1
SET originFloor TO 1
SET numElevatorsPerColumn TO 2
SET numFloors TO 10
SET columnsList TO empty List

'Instantiate the columns, which then instantiate the elevators and its subfeatures'
FOR columnNum = 1 TO numColumns
    SET column TO INSTANTIATE Column WITH columnNum AND "online"
    CALL CreateElevatorList OF column WITH numElevatorPerColumn
    ADD column TO columnsList
ENDFOR

'Instantiate the call buttons of each floor'
FOR floorNum = 1 TO numFloors
    INSTANTIATE CallButton WITH floorNum AND "up"
    INSTANTIATE CallButton WITH floorNum AND "down"
ENDFOR
====================================================================================================================================================
~OBJECT DEFINITIONS~
====================================================================================================================================================
'Define a column'
DEFINE Column USING id AND status:
    ID: id,
    Status: status,
    ElevatorList: SET TO empty List

    SEQUENCE CreateElevatorList USING numElevators
        FOR elevatorNum = 1 TO numElevators
            SET elevator TO INSTANTIATE Elevator WITH elevatorNum AND "online"
            CALL InitButtons OF elevator 
            ADD elevator TO ElevatorList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'Define an elevator'
DEFINE Elevator USING id AND status:
    ID: id,
    Status: status,
    Movement: SET TO "idle",
    Direction: SET TO null,
    CurrentFloor: SET TO originFloor,
    NextFloor: SET TO null,
    RequestsQueue: SET TO empty List,
    Door: SET TO INSTANTIATE Door WITH "closed",
    Buttons: SET TO List OF size numFloors OF INSTANTIATE FloorButton

    SEQUENCE InitButtons 
        SET floorNumber TO 1
        FOR EACH button in Buttons
            SET Floor OF button TO floorNumber
            INCREMENT floorNumber WITH 1
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'Define an elevator door'
DEFINE Door USING status:
    Status: status

    SEQUENCE OpenDoor
        SET status OF door TO "opened"
    ENDSEQUENCE

    SEQUENCE CloseDoor
        SET status OF door TO "closed"
    ENDSEQUENCE
ENDDEFINE

'Define an elevator floor button'
DEFINE FloorButton:
    Floor: null,
    isToggled: false,
    isEmittingLight: false

    SEQUENCE Press 
        SET isToggled TO true
        SET isEmittingLight TO true
    ENDSEQUENCE 
ENDDEFINE

'Define an elevator call button'
DEFINE CallButton USING floor AND direction:
    Floor: floor,
    Direction: direction,
    isPressed: false,
    isEmittingLight: false

    SEQUENCE CallElevator
        SET currentFloor TO Floor
        SET direction TO Direction
        SET isPressed TO true
        SET isEmittingLight TO true

        SET columnID TO ID OF Column which contains the elevators that you may use 
        SET chosenElevator = CALL ChooseElevator WITH currentFloor AND direction AND columnID

        IF (chosenElevator is null) THEN
            DISPLAY "ALL OF OUR ELEVATORS ARE CURRENTLY UNDERGOING MAINTENANCE, SORRY FOR THE INCONVENIENCE"
        ELSE 
            ADD currentFloor TO RequestsQueue OF chosenElevator
        ENDIF
    ENDSEQUENCE
ENDDEFINE
====================================================================================================================================================
~CHOOSE WHICH ELEVATOR BASED ON SCORE SYSTEM~
====================================================================================================================================================
SEQUENCE ChooseElevator USING requestFloor AND requestDirection AND columnID
    SET column TO Column WITH ID OF columnID
    SET elevatorScores TO empty List OF size numElevatorsPerColumn
    
    FOR EACH elevator in ElevatorList OF column
        SET score TO 0
        SET floorDifference = Floor OF elevator - requestFloor
    
        'PREVENTS USE OF ANY ELEVATORS UNDER MAINTENANCE'
        IF (Status OF elevator IS NOT "online") THEN
            SET score TO -1
            ADD score TO elevatorScores
            SKIP score calculation and go TO NEXT elevator 
        ENDIF

        'BONIFY SCORE BASED ON THE DIFFERENCE IN FLOOR' 
        CASE (absolute value OF floorDifference) OF 
            0: INCREMENT score WITH 900
            1: INCREMENT score WITH 800
            2: INCREMENT score WITH 700
            3: INCREMENT score WITH 600
            4: INCREMENT score WITH 500
            5: INCREMENT score WITH 400
            6: INCREMENT score WITH 300
            7: INCREMENT score WITH 200
            8: INCREMENT score WITH 100
            9: INCREMENT score WITH 0
        ENDCASE

        'BONIFY SCORE BASED ON DIRECTION (HIGHEST PRIORITY)'
        IF (Movement OF elevator IS "active") THEN
            IF (floorDifference >= 0) AND (requestDirection IS "down") AND (Direction OF elevator IS "DOWN") THEN
                'Paths are crossed'
                INCREMENT score WITH 10000
            ELSE IF (floorDifference <= 0) AND (requestDirection IS "up") AND (Direction OF elevator IS "up") THEN
                'Paths are crossed'
                INCREMENT score WITH 10000
            ELSE
                'Paths are not crossed, therefore try to avoid calling this elevator by minimizing the score'
                SET score TO 0
                SET nextFloorDifference = NextFloor OF elevator  - requestFloor
                CASE (absolute value OF nextFloorDifference) OF 
                    0: INCREMENT score WITH 90
                    1: INCREMENT score WITH 80
                    2: INCREMENT score WITH 70
                    3: INCREMENT score WITH 60
                    4: INCREMENT score WITH 50
                    5: INCREMENT score WITH 40
                    6: INCREMENT score WITH 30
                    7: INCREMENT score WITH 20
                    8: INCREMENT score WITH 10
                    9: INCREMENT score WITH 0
                ENDCASE

        'BONIFY SCORE BASED ON THE ALREADY EXISTING REQUEST QUEUE SIZE'
        IF (RequestsQueue OF elevator <= 3) THEN
            INCREMENT score WITH 500
        ELSE IF (RequestsQueue OF elevator <= 7) THEN
            INCREMENT score WITH 250
        ENDIF

        'SEND TOTAL'
        ADD score TO elevatorScores
    ENDFOR

    'Get the value of highest score'            
    SET highestScore TO -1
    FOR EACH score in elevatorScores
        IF (score > highestScore) THEN
            SET highestScore TO score 
        ENDIF
    ENDFOR

    'Get the elevator with highest score (or get nothing if all elevators are under maintenance'
    SET chosenElevator TO null 
    IF (highestScore IS NOT -1) THEN
        SET chosenElevator = the elevator WITH highestScore 
    ENDIF
    RETURN chosenElevator 
ENDSEQUENCE 
























   
























    


