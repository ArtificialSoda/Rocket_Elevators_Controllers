'$$$ Author: Fabien H. Dimitrov $$$'
'$$$ Context: Codeboxx Week 1 (Odyssey) $$$'
====================================================================================================================================================
~~~MAIN~~~
====================================================================================================================================================
'Globals'
SET numColumns TO 1
SET originFloor TO 1
SET numElevatorsPerColumn TO 2
SET numFloors TO 10
SET columnsList TO empty List

'Instantiate the columns, which then instantiate the elevators and its subfeatures'
FOR columnNum = 1 TO numColumns
    SET column TO INSTANTIATE Column WITH columnNum AND "online"
    CALL CreateElevatorList OF column WITH numElevatorPerColumn
    ADD column TO columnsList
ENDFOR

'Instantiate the call buttons of each floor'
FOR floorNum = 1 TO numFloors
    INSTANTIATE CallButton WITH floorNum 


====================================================================================================================================================
~OBJECT DEFINITIONS~
====================================================================================================================================================
'Define a column'
DEFINE Column USING id AND status:
    ID: id,
    Status: status,
    ElevatorList: SET TO empty List

    SEQUENCE CreateElevatorList USING numElevators
        SET elevatorList TO empty List
        FOR elevatorNum = 1 TO numElevators
            SET elevator TO INSTANTIATE Elevator WITH elevatorNum AND "online"
            CALL InitButtons OF elevator 
            ADD elevator TO elevatorList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'Define an elevator'
DEFINE Elevator USING id AND status:
    ID: id,
    Status: status,
    Movement: SET TO "idle",
    Direction: SET TO null,
    CurrentFloor: SET TO originFloor,
    NextFloor: SET TO null,
    RequestsQueue: SET TO empty List,
    Door: SET TO INSTANTIATE Door WITH "closed",
    Buttons: SET TO List OF size numFloors OF INSTANTIATE FloorButton

    SEQUENCE InitButtons 
        SET floorNumber = 1
        FOR EACH button in Buttons
            SET Floor OF button TO floorNumber
            INCREMENT floorNumber WITH 1
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'Define an elevator door'
DEFINE Door USING status:
    Status: status

    SEQUENCE OpenDoor
        SET status OF door TO "opened"
    ENDSEQUENCE

    SEQUENCE CloseDoor
        SET status OF door TO "closed"
    ENDSEQUENCE
ENDDEFINE

'Define an elevator floor button'
DEFINE FloorButton:
    Floor: null,
    isToggled: false,
    isEmittingLight: false

    SEQUENCE Press 
        SET isToggled TO true
        SET isEmittingLight TO true
    ENDSEQUENCE 
ENDDEFINE

'Define an elevator call button'
DEFINE CallButton USING floor:
    Floor: floor

    IF (Floor IS last floor of building) THEN
        isDownToggled: SET TO false 
    ELSE IF (Floor IS first floor of building) THEN
        isUpToggled: SET TO false
    ELSE
        isDownToggled: SET TO false,
        isUpToggled: SET TO false
    ENDIF
ENDDEFINE
====================================================================================================================================================
~FUNCTION: CALLING AN ELEVATOR VIA BUTTON~
====================================================================================================================================================
SEQUENCE CallElevator USING currentFloor
    INIT request 
        {
            currentFloor
            direction
        }

    SET request.currentFloor TO currentFloor
    IF (isUpToggled IS true) AND (isDownToggled IS true) THEN
        DISPLAY "TRY PRESSING AGAIN - PICK ONLY ONE DIRECTION"
        SET isUpToggled, isDownToggled TO false
    ELSE IF isUpToggled IS true THEN
        SET request.direction TO "UP"
    ELSE IF isDownToggled IS true THEN
        SET request.direction TO "DOWN"
    ENDIF

    SET chosenElevator TO CALL ChooseElevator USING request and elevators
    IF (chosenElevator is null) THEN
        DISPLAY "ALL OF OUR ELEVATORS ARE CURRENTLY UNDERGOING MAINTENANCE, SORRY FOR THE INCONVENIENCE"
    ELSE 
        ADD request TO END of chosenElevator.requestsQueue
    ENDIF
ENDSEQUENCE
================================================================
            ~CHOOSE WHICH ELEVATOR BASED ON SCORE~
================================================================
SEQUENCE ChooseElevator USING request AND elevators
    INIT List elevatorScores OF size elevators
    FOR EACH elevatorScore in elevatorScores
        SET elevatorScore TO 0
    ENDFOR
    
    FOR EACH elevator in elevators
        SET score TO 0
        SET floorDifference TO elevator.currentFloor - request.currentFloor
        
        IF (elevator.isDown IS true) THEN
            SET score TO -1
            ADD score TO elevatorScores
            SKIP score calculation and go TO next elevator 
        ENDIF

        'BONIFY SCORE BASED ON THE DIFFERENCE IN FLOOR' 
        CASE (absolute value OF floorDifference) OF 
            0: INCREMENT score WITH 900
            1: INCREMENT score WITH 800
            2: INCREMENT score WITH 700
            3: INCREMENT score WITH 600
            4: INCREMENT score WITH 500
            5: INCREMENT score WITH 400
            6: INCREMENT score WITH 300
            7: INCREMENT score WITH 200
            8: INCREMENT score WITH 100
            9: INCREMENT score WITH 0
        ENDCASE

        'BONIFY SCORE BASED ON DIRECTION (HIGHEST PRIORITY)'
        IF (elevator.status IS "active") THEN
            IF (floorDifference IS GREATER THAN OR EQUAL TO 0) AND (request.direction IS "DOWN") AND (elevator.direction IS "DOWN") THEN
                INCREMENT score WITH 10000
            ELSE IF (floorDifference IS LESS THAN OR EQUAL TO 0) AND (request.direction IS "UP") AND (elevator.direction IS "UP") THEN
                INCREMENT score WITH 10000
            ELSE
                SET score TO 0
                SET nextFloorDifference TO elevator.nextFloor - request.currentFloor
                CASE (absolute value OF nextFloorDifference) OF 
                    0: INCREMENT score WITH 90
                    1: INCREMENT score WITH 80
                    2: INCREMENT score WITH 70
                    3: INCREMENT score WITH 60
                    4: INCREMENT score WITH 50
                    5: INCREMENT score WITH 40
                    6: INCREMENT score WITH 30
                    7: INCREMENT score WITH 20
                    8: INCREMENT score WITH 10
                    9: INCREMENT score WITH 0
                ENDCASE

        'BONIFY SCORE BASED ON THE ALREADY EXISTING REQUEST QUEUE SIZE'
        IF (elevator.requestsQueue IS LESS THAN OR EQUAL TO 3) THEN
            INCREMENT score WITH 500
        ELSE IF (elevator.requestsQueue IS LESS THAN OR EQUAL TO 7) THEN
            INCREMENT score WITH 250
        ENDIF


        ADD score TO elevatorScores
    ENDFOR

    SET highestScore TO -1
    FOR EACH score in elevatorScores
        IF (score IS GREATER THAN highestScore) THEN
            SET highestScore TO score 
        ENDIF
    ENDFOR

    SET chosenElevator TO null 
    IF (highestScore IS NOT EQUAL TO -1) THEN
        SET chosenElevator TO elevator WITH highestScore 
    ENDIF
    RETURN chosenElevator 
ENDSEQUENCE 





















INIT elevators 
INIT columns 
{
    SET numElevators TO 2
    FOR elevator = 1 TO numElevators
        ADD elevator {
            // properties of an elevator
            isDown
            door
            status
            ...
        } TO elevators
    ENDFOR   
}










   
























    


