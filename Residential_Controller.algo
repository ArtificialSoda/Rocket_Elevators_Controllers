'$$$ Author: Fabien H. Dimitrov $$$'
'$$$ Context: Codeboxx Week 1 (Odyssey) $$$'
'$$$ Additional Info: The 'modern' approach is used for the Commercial controller' $$$
====================================================================================================================================================
~~~MAIN~~~
====================================================================================================================================================
'Globals'
SET numColumns TO 1
SET originFloor TO 1
SET numElevatorsPerColumn TO 2
SET numFloors TO 10
SET columnsList TO empty List
SET callButtonsList TO empty List

'Instantiate the call buttons of each floor'
FOR floorNum = 1 TO numFloors
    SET upButton TO INSTANTIATE CallButton WITH floorNum AND "up"
    SET downButton TO INSTANTIATE CallButton WITH floorNum AND "down"
    ADD upButton AND downButton TO callButtonsList
ENDFOR

'Instantiate the columns, which then instantiate the elevators and its subfunctionalities'
FOR columnNum = 1 TO numColumns
    SET column TO INSTANTIATE Column WITH columnNum AND "online"
    CALL CreateElevatorList OF column WITH numElevatorPerColumn
    ADD column TO columnsList
ENDFOR

'Enable the elevator system for each column that is not under maintenance'
'Do constant security checks'
FOR EACH column IN columnsList 
    WHILE Status OF column IS NOT "offline"
        
        'Check for any potential elevator calls'
        FOR EACH button in callButtonsList
            IF (sensors detect pressure on button) THEN
                CALL Press OF button
            ENDIF
        ENDFOR

        'Check if elevator is at full capacity'
        'Move elevators to their destinations'
        FOR EACH elevator in ElevatorList OF column
            MONITOR the security and performance OF elevator
            SET Status OF elevator TO "offline" WHEN problem arises
            CALL CheckWeight WITH elevator
            CALL DoRequests OF elevator
            CALL CheckFloorButtonRequests OF elevator 
        ENDFOR

        MONITOR the security and performance OF column
        SET Status OF column TO "offline" WHEN problem arises
        
    ENDWHILE
ENDFOR

====================================================================================================================================================
~OBJECT DEFINITIONS~
====================================================================================================================================================
'Define a column'
DEFINE Column USING id AND status:
    ID: id,
    Status: status,
    ElevatorList: SET TO empty List

    SEQUENCE CreateElevatorList USING numElevators
        FOR elevatorNum = 1 TO numElevators
            SET elevator TO INSTANTIATE Elevator WITH elevatorNum AND "online"
            CALL InitButtons OF elevator 
            ADD elevator TO ElevatorList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'Define an elevator'
DEFINE Elevator USING id AND status:
    ID: id,
    Status: status,
    Movement: SET TO "idle",
    Direction: SET TO null,
    CurrentFloor: SET TO originFloor,
    NextFloor: SET TO null,
    RequestsQueue: SET TO empty List,
    Door: SET TO INSTANTIATE Door WITH "closed",
    Buttons: SET TO List OF size numFloors OF INSTANTIATE FloorButton

    'Give value to all floor buttons of elevator'
    SEQUENCE InitButtons 
        SET floorNumber TO 1
        FOR EACH button in Buttons
            SET Floor OF button TO floorNumber
            INCREMENT floorNumber WITH 1
        ENDFOR
    ENDSEQUENCE

    'Make elevator go to origin floor'
    SEQUENCE GoToOrigin
        SET NextFloor OF elevator = originFloor
        WHILE CurrentFloor OF elevator IS NOT NextFloor OF elevator
            DISPLAY CurrentFloor ON screen inside elevator
            CONTINUE going TOWARDS NextFloor
        ENDWHILE
        DISPLAY CurrentFloor ON screen inside elevator
    ENDSEQUENCE

    'Sort requests for added efficiency'
    SEQUENCE SortRequestsQueue
        SET Movement OF elevator TO "active"
        SET Direction OF elevator TO direction OF 1st request in RequestsQueue
        
        IF (Direction OF elevator IS "up") THEN
            SORT RequestsQueue OF elevator in ASCENDING ORDER
            FOR EACH request in RequestsQueue
                IF (floor OF request < CurrentFloor OF elevator) OR (direction OF request IS NOT Direction OF elevator) THEN
                    PUT request at the END OF RequestsQueue
                ENDIF
            ENDFOR  
        ENDIF

        IF (Direction OF elevator IS "down") THEN
            SORT RequestsQueue OF elevator in DESCENDING ORDER
            FOR EACH request in RequestsQueue
                IF (floor OF request > CurrentFloor OF elevator) OR (direction OF request IS NOT Direction OF elevator) THEN
                    PUT request at the END OF RequestsQueue
                ENDIF
            ENDFOR  
        ENDIF
    ENDSEQUENCE 

    'Complete the requests'
    SEQUENCE DoRequests

        IF (RequestsQueue OF elevator IS NOT empty) THEN

            'Make sure the queue is sorted before elevator completes any requests'
            CALL SortRequestsQueue OF elevator 

            'Go to destination (next) floor'
            SET NextFloor OF elevator = floor OF 1st request in [SORTED] RequestsQueue
            WHILE CurrentFloor OF elevator IS NOT NextFloor OF elevator
                DISPLAY CurrentFloor ON screen inside elevator
                CONTINUE going TOWARDS NextFloor
            ENDWHILE

            'Destination floor is reached'
            DISPLAY CurrentFloor ON screen inside elevator
            SET Door OF elevator TO "open"
            SET isEmittingLight OF ALL CallButton WITH CurrentFloor TO false 
            REMOVE 1st request in [SORTED] RequestsQueue
            
            'Automatically close door after certain time'
            SET Door OF elevator TO "closed" AFTER 5 seconds

        ELSE
            'Automatically go to origin floor after certain time of inactivity'
            IF (RequestsQueue OF elevator IS empty MORE THAN 10 minutes) THEN
                CALL GoToOrigin
                SET Movement OF elevator TO "idle"
            ENDIF
        ENDIF
    ENDSEQUENCE

    'Check if a floor button inside has been pressed - if yes, form new request'
    SEQUENCE CheckFloorButtonRequests
        FOR EACH button in Buttons OF elevator 
            IF (sensors detect pressure on button) THEN
                CALL Press OF button

                'Get what is the direction of the new request'
                SET floorDifference = CurrentFloor OF elevator - Floor OF button
                IF (floorDifferece > 0) THEN
                    SET requestDirection TO "down"
                ELSE 
                    SET requestDirection TO "up"
                ENDIF

                'Send new request to the same elevator'
                ADD (Floor OF button, requestDirection) TO RequestsQueue OF elevator
            ENDIF
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'Define an elevator door'
DEFINE Door USING status:
    Status: status

    SEQUENCE OpenDoor
        SET status OF door TO "opened"
    ENDSEQUENCE

    SEQUENCE CloseDoor
        SET status OF door TO "closed"
    ENDSEQUENCE
ENDDEFINE

'Define an elevator floor button'
DEFINE FloorButton:
    Floor: SET TO null,
    isToggled: SET TO false,
    isEmittingLight: SET TO false

    SEQUENCE Press 
        SET isToggled TO true UNTIL Floor is reached
        SET isEmittingLight TO true UNTIL Floor is reached
    ENDSEQUENCE 
ENDDEFINE

'Define an elevator call button'
DEFINE CallButton USING floor AND direction:
    Floor: floor,
    Direction: direction,
    isPressed: SET TO false,
    isEmittingLight: SET TO false

    SEQUENCE Press
        SET currentFloor TO Floor
        SET direction TO Direction
        SET isPressed TO true UNTIL elevator shows up
        SET isEmittingLight TO true UNTIL elevator shows up

        SET columnID TO ID OF Column which contains the elevators that you want to use 
        CALL ChooseElevator WITH currentFloor AND direction AND columnID RETURNING chosenElevator                               

        IF (chosenElevator is null) THEN
            DISPLAY "ALL OF OUR ELEVATORS ARE CURRENTLY UNDERGOING MAINTENANCE, SORRY FOR THE INCONVENIENCE"
        ELSE 
            ADD (currentFloor, direction) TO RequestsQueue OF chosenElevator
        ENDIF
    ENDSEQUENCE
ENDDEFINE
====================================================================================================================================================
~CHOOSE WHICH ELEVATOR SHOULD BE CALLED
====================================================================================================================================================
'With the score system, a request gets send to the elevator with the most points accumulated for maximum efficiency'
SEQUENCE ChooseElevator USING requestFloor AND requestDirection AND columnID
    SET column TO Column WITH ID OF columnID
    SET elevatorScores TO empty List OF size numElevatorsPerColumn
    
    FOR EACH elevator in ElevatorList OF column
        SET score TO 0
        SET floorDifference = CurrentFloor OF elevator - requestFloor
    
        'PREVENTS USE OF ANY ELEVATORS UNDER MAINTENANCE'
        IF (Status OF elevator IS NOT "online") THEN
            SET score TO -1
            ADD score TO elevatorScores
            SKIP score calculation and GO TO NEXT elevator 
        ENDIF

        'BONIFY SCORE BASED ON THE DIFFERENCE IN FLOOR' 
        CASE (absolute value OF floorDifference) OF 
            0: INCREMENT score WITH 900
            1: INCREMENT score WITH 800
            2: INCREMENT score WITH 700
            3: INCREMENT score WITH 600
            4: INCREMENT score WITH 500
            5: INCREMENT score WITH 400
            6: INCREMENT score WITH 300
            7: INCREMENT score WITH 200
            8: INCREMENT score WITH 100
            9: INCREMENT score WITH 0
        ENDCASE

        'BONIFY SCORE BASED ON DIRECTION (HIGHEST PRIORITY)'
        IF (Movement OF elevator IS "active") THEN
            IF (floorDifference >= 0) AND (requestDirection IS "down") AND (Direction OF elevator IS "down") THEN
                'Paths are crossed'
                INCREMENT score WITH 10000
            ELSE IF (floorDifference <= 0) AND (requestDirection IS "up") AND (Direction OF elevator IS "up") THEN
                'Paths are crossed'
                INCREMENT score WITH 10000
            ELSE
                'Paths are not crossed, therefore try to avoid calling this elevator by minimizing the score'
                SET score TO 0
                SET nextFloorDifference = NextFloor OF elevator  - requestFloor
                CASE (absolute value OF nextFloorDifference) OF 
                    0: INCREMENT score WITH 90
                    1: INCREMENT score WITH 80
                    2: INCREMENT score WITH 70
                    3: INCREMENT score WITH 60
                    4: INCREMENT score WITH 50
                    5: INCREMENT score WITH 40
                    6: INCREMENT score WITH 30
                    7: INCREMENT score WITH 20
                    8: INCREMENT score WITH 10
                    9: INCREMENT score WITH 0
                ENDCASE

        'BONIFY SCORE BASED ON THE ALREADY EXISTING REQUEST QUEUE SIZE'
        IF (RequestsQueue OF elevator <= 3) THEN
            INCREMENT score WITH 500
        ELSE IF (RequestsQueue OF elevator <= 7) THEN
            INCREMENT score WITH 250
        ENDIF

        'SEND TOTAL'
        ADD score TO elevatorScores
    ENDFOR

    'Get the value of highest score'            
    SET highestScore TO -1
    FOR EACH score in elevatorScores
        IF (score > highestScore) THEN
            SET highestScore TO score 
        ENDIF
    ENDFOR

    'Get the elevator with highest score (or get nothing if all elevators are under maintenance'
    SET chosenElevator TO null 
    IF (highestScore IS NOT -1) THEN
        SET chosenElevator = the elevator WITH highestScore 
    ENDIF
    RETURN chosenElevator 
ENDSEQUENCE
====================================================================================================================================================
~CHECK WEIGHT CAPACITY~
====================================================================================================================================================
SEQUENCE CheckWeight USING elevator 
    SET MaxWeightKG TO 555
    SET CurrentWeightKG TO CALCULATE

    IF (currentWeightKG > maxWeightKG) THEN
        DISPLAY "ALERT: MAXIMUM WEIGHT CAPACITY SURPASSED, PLEASE LOWER THE WEIGHT" WITH beep sound
        SET Door OF elevator TO "open"
        FREEZE elevator
    ENDIF
ENDSEQUENCE 




















   
























    


