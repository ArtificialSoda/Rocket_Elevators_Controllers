'$$$ Author: Fabien H. Dimitrov $$$'
'$$$ Context: Codeboxx Week 1 (Odyssey) $$$'
'$$$ Additional Info: The 'modern' approach is used for the Commercial controller' $$$
====================================================================================================================================================
~~~MAIN~~~
====================================================================================================================================================
'Globals'
SET numBatteries TO 1
SET numColumns TO 1
SET numElevatorsPerColumn TO 2
SET originFloor TO 1
SET numFloors TO 10

'Instantiate the batteries, the columns, and the elevators'
SET battery TO INSTANTIATE Battery WITH 1 AND "online"
CALL CreateColumnList OF battery
CALL ActivateSystem OF battery

====================================================================================================================================================
~OBJECT DEFINITIONS~
====================================================================================================================================================
'Define a battery (a collection of columns)'
DEFINE Battery USING id AND status:
    ID: id,
    Status: status,
    ColumnList: SET TO empty List

    SEQUENCE CreateColumnList 
        FOR columnNum = 1 TO numColumns
            SET column TO INSTANTIATE Column WITH columnNum AND "online"
            CALL CreateElevatorList OF column
            CALL DisplayFloorsOutside OF column
            ADD column TO ColumnList
        ENDFOR
    ENDSEQUENCE

    'Activate the whole elevator system'
    SEQUENCE ActivateSystem

        'Reactivate after a shutdown if there is no more issues'
        IF (Status IS "offline") AND (serious problem NOT exist)
            SET Status TO "online"
        ENDIF

        WHILE Status IS "online"
            FOR EACH column in ColumnList 
                IF (Status OF column IS "online")

                    FOR EACH elevator in ElevatorList OF column
                        'Do constant security checks on the elevators'
                        MONITOR the security and performance OF elevator
                        SET Status OF elevator TO "offline" WHEN serious problem arises

                        'Display floor INSIDE elevator'
                        CALL DisplayFloor OF elevator
                        'Check if elevator is at full capacity'
                        CALL CheckWeight OF elevator
                        'Move elevators to their destinations'
                        CALL DoRequests OF elevator
                    ENDFOR

                ENDIF
            ENDFOR

            'Do constant security checks on batteries, shutdown if necessary'
            IF (THERE IS power outage)
                ACTIVATE generators
            ENDIF
            IF (THERE IS fire)
                GET location OF fire
                ACTIVATE sprinklers NEAR location
                SEND firefighters TO location
            ENDIF
            SET Status TO "offline" WHEN serious problem arises
        ENDWHILE
    ENDSEQUENCE
ENDDEFINE

'Define a column'
DEFINE Column USING id AND status:
    ID: id,
    Status: status,
    ElevatorList: SET TO empty List

    SEQUENCE CreateElevatorList
        FOR elevatorNum = 1 TO numElevatorsPerColumn
            SET elevator TO INSTANTIATE Elevator WITH elevatorNum AND "online"
            CALL InitButtons OF elevator 
            ADD elevator TO ElevatorList
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'Define an elevator'
DEFINE Elevator USING id AND status:
    ID: id,
    Status: status,
    Movement: SET TO "idle",
    Direction: SET TO null,
    CurrentFloor: SET TO originFloor,
    NextFloor: SET TO null,
    RequestsQueue: SET TO empty List,
    Door: SET TO INSTANTIATE Door WITH "closed",
    Buttons: SET TO List OF size numFloors OF INSTANTIATE FloorButton

    'Change attributes of elevator in 1 call - USE ONLY FOR TESTING'
    SEQUENCE ChangeAttributesTEST USING newMovement AND newCurrentFloor AND newNextFloor AND newDirection
        SET Movement TO newMovement
        SET CurrentFloor TO newCurrentFloor
        SET NextFloor TO newNextFloor
        SET Direction TO newDirection
    ENDSEQUENCE

    'Make elevator go to origin floor'
    SEQUENCE GoToOrigin
        SET NextFloor OF elevator = originFloor
        WHILE CurrentFloor OF elevator IS NOT NextFloor OF elevator
            CONTINUE going TOWARDS NextFloor
        ENDWHILE
    ENDSEQUENCE

    'Give value to all floor buttons of elevator'
    SEQUENCE InitButtons 
        SET floorNumber TO 1
        FOR EACH button in Buttons
            SET Floor OF button TO floorNumber
            INCREMENT floorNumber WITH 1
        ENDFOR
    ENDSEQUENCE

    'Sort requests for added efficiency'
    SEQUENCE SortRequestsQueue
        SET request TO 1st request in RequestsQueue 

        SET Movement OF elevator TO "active"
        SET Direction OF elevator TO Direction OF request
        
        IF (number of requests in RequestsQueue > 1) THEN
            IF (Direction OF elevator IS "up") THEN
                SORT RequestsQueue OF elevator in ASCENDING ORDER
                FOR EACH request in RequestsQueue
                    IF (Floor OF request < CurrentFloor OF elevator) OR (Direction OF request IS NOT Direction OF elevator) THEN
                        PUT request at the END OF RequestsQueue
                    ENDIF
                ENDFOR  

            ELSE IF (Direction OF elevator IS "down") THEN
                SORT RequestsQueue OF elevator in DESCENDING ORDER
                FOR EACH request in RequestsQueue
                    IF (Floor OF request > CurrentFloor OF elevator) OR (Direction OF request IS NOT Direction OF elevator) THEN
                        PUT request at the END OF RequestsQueue
                    ENDIF
                ENDFOR  
            ENDIF
        ENDIF
    ENDSEQUENCE 

    'Complete the requests'
    SEQUENCE DoRequests

        IF (RequestsQueue IS NOT empty) THEN

            'Make sure the queue is sorted before elevator completes any requests'
            CALL SortRequestsQueue
            SET request TO 1st request OF RequestsQueue

            'Go to destination floor'
            CALL CloseDoor OF Door
            SET NextFloor TO Floor OF request
            WHILE CurrentFloor IS NOT NextFloor
                
                'Move up or move down a floor every 2 seconds'
                IF (Direction OF request IS "up") THEN
                    INCREMENT CurrentFloor WITH 1 AFTER 2 seconds
                ELSE IF (Direction OF request IS "down") THEN
                    DECREMENT CurrentFloor WITH 1 AFTER 2 seconds
                ENDIF

            ENDWHILE

            'Destination floor is reached'
            CALL OpenDoor OF Door
            REMOVE request FROM RequestsQueue
            WAIT 10 seconds
            CALL CloseDoor OF Door

        ELSE
            SET Movement OF elevator TO "idle"
            SET Direction OF elevator TO null
            'Automatically go to origin floor after certain time of inactivity, in the evenings (after work/school), to boost efficiency'
            IF (RequestsQueue IS empty MORE THAN 5 minutes) AND (IS evening) THEN
                CALL GoToOrigin
            ENDIF
        ENDIF
    ENDSEQUENCE

    'Enable floor display INSIDE the elevator'
    SEQUENCE DisplayFloor
        SET floorDisplay TO INSTANTIATE FloorDisplay WITH Elevator
        CALL ShowFloor OF floorDisplay
    ENDSEQUENCE
  
    'Check if elevator is at full capacity'
    SEQUENCE CheckWeight
        SET maxWeightKG TO 555
        CALCULATE weight (kilograms) inside AND THEN SET TO currentWeightKG

        IF (currentWeightKG > maxWeightKG) THEN
            DISPLAY "ALERT: MAXIMUM WEIGHT CAPACITY SURPASSED, PLEASE LOWER THE WEIGHT" WITH beep sound
            SET Door OF elevator TO "open"
            FREEZE elevator
        ENDIF
    ENDSEQUENCE 
ENDDEFINE

'Define an elevator door'
DEFINE Door USING status:
    Status: status

    SEQUENCE OpenDoor
        SET status OF door TO "opened"
    ENDSEQUENCE

    SEQUENCE CloseDoor
        SET status OF door TO "closed"
    ENDSEQUENCE
ENDDEFINE

'Define an elevator floor button'
DEFINE FloorButton:
    Floor: SET TO null,
    Direction: SET TO null,
    isToggled: SET TO false,
    isEmittingLight: SET TO false

    SEQUENCE Press
        IF (Floor IS NOT null) THEN
            SET isToggled TO true UNTIL Floor is reached THEN SET TO false
            SET isEmittingLight TO true UNTIL Floor is reached THEN SET to false

            'Get what is the direction of the new request'
            SET floorDifference = CurrentFloor OF elevator - Floor
            IF (floorDifference > 0) THEN
                SET Direction TO "down"
            ELSE 
                SET Direction TO "up"
            ENDIF

            'Send new request to the same elevator'
            SET request TO INSTANTIATE Request WITH Floor AND Direction
            ADD request TO RequestsQueue
        ENDIF
    ENDSEQUENCE 
ENDDEFINE

'Define an elevator call button'
DEFINE CallButton USING floor AND direction AND columnID:
    Floor: floor,
    Direction: direction,
    Column: SET TO the Column WHICH has ID OF columnID: 
    isPressed: SET TO false,
    isEmittingLight: SET TO false

    'Choose which elevator should be called, based on the call button's floor and direction'
    'With the score system, a request gets sent to the elevator with the most points accumulated for maximum efficiency'
    SEQUENCE ChooseElevator USING callBtnFloor AND callBtnDirection
        SET elevatorScores TO empty List OF size numElevatorsPerColumn
        
        FOR EACH elevator in ElevatorList OF Column
            SET score TO 0
            SET floorDifference = CurrentFloor OF elevator - callBtnFloor
    
        
            'PREVENTS USE OF ANY ELEVATORS UNDER MAINTENANCE'
            IF (Status OF elevator IS NOT "online") THEN
                SET score TO -1
                ADD score TO elevatorScores
            ELSE

                'BONIFY SCORE BASED ON THE DIFFERENCE IN FLOOR' 
                SET absFloorDifference TO absolute value OF floorDifference
                IF (absFloorDifference IS 0) THEN
                    INCREMENT score WITH 5000
                ELSE
                    INCREMENT score WITH 5000/(absFloorDifference + 1)
                ENDIF

                'BONIFY SCORE BASED ON DIRECTION (HIGHEST PRIORITY)'
                IF (Movement OF elevator IS "active") THEN
                    IF (floorDifference >= 0) AND (callBtnDirection IS "down") AND (Direction OF elevator IS "down") THEN
                        'Paths are crossed'
                        INCREMENT score WITH 10000
                    ELSE IF (floorDifference <= 0) AND (callBtnDirection IS "up") AND (Direction OF elevator IS "up") THEN
                        'Paths are crossed'
                        INCREMENT score WITH 10000
                    ELSE
                        'Paths are not crossed, therefore try to avoid calling this elevator by minimizing the score'
                        SET score TO 0
                        SET nextFloorDifference = NextFloor OF elevator  - callBtnFloor

                        SET absNextFloorDifference TO absolute value OF nextFloorDifference
                        IF (absNextFloorDifference IS 0) THEN
                            INCREMENT score WITH 500
                        ELSE
                            INCREMENT score WITH 500/(absNextFloorDifference + 1)
                        ENDIF

                    ENDIF
                ENDIF
                'BONIFY SCORE BASED ON THE ALREADY EXISTING REQUEST QUEUE SIZE'
                IF (RequestsQueue OF elevator <= 3) THEN
                    INCREMENT score WITH 1000
                ELSE IF (RequestsQueue OF elevator <= 7) THEN
                    INCREMENT score WITH 250
                ENDIF

                'SEND TOTAL'
                ADD score TO elevatorScores
            ENDIF
        ENDFOR

        'Get the value of highest score'            
        SET highestScore TO -1
        FOR EACH score in elevatorScores
            IF (score > highestScore) THEN
                SET highestScore TO score 
            ENDIF
        ENDFOR

        'Get the elevator with highest score (or get nothing if all elevators are under maintenance'
        SET chosenElevator TO null 
        IF (highestScore IS NOT -1) THEN
            SET chosenElevator = the elevator WITH highestScore 
        ENDIF
        RETURN chosenElevator 
    ENDSEQUENCE

    'Send request to chosen elevator'
    SEQUENCE Press
        SET isPressed TO true UNTIL elevator shows up THEN SET to false
        SET isEmittingLight TO true UNTIL elevator shows up THEN SET TO false
        CALL ChooseElevator OF CallButton WITH currentFloor AND direction RETURNING chosenElevator                               

        IF (chosenElevator IS null) THEN
            DISPLAY "ALL OF OUR ELEVATORS ARE CURRENTLY UNDERGOING MAINTENANCE, SORRY FOR THE INCONVENIENCE"
        ELSE 
            SET request TO INSTANTIATE Request WITH Floor AND Direction
            ADD request TO RequestsQueue OF chosenElevator
        ENDIF
    ENDSEQUENCE
ENDDEFINE

'Define an elevator floor display'
DEFINE FloorDisplay USING elevator:
    Elevator: elevator

    SEQUENCE ShowFloor
        WHILE Status OF elevator IS NOT "offline"
            DISPLAY CurrentFloor OF elevator ON a screen
        ENDWHILE
    ENDSEQUENCE

ENDDEFINE

'Define a request - which is sent to an elevator'
DEFINE Request USING floor AND direction
    Floor: floor,
    Direction: direction
ENDDEFINE

'==================================================================================================================================================='
'                                               ~ EXAMPLE SCENARIOS ~
'==================================================================================================================================================='
SET column1 TO 1st column in ColumnList OF battery

'SCENARIO 1'
SET pressedCallButton TO INSTANTIATE CallButton WITH 3 AND "up" AND 1

SET c1A1 TO 1st elevator in ElevatorList OF column1
SET c1B1 TO 2nd elevator in ElevatorList OF column1

CALL ChangeAttributesTEST OF c1A1 WITH "idle" AND 2 AND null AND null
CALL ChangeAttributesTEST OF c1B1 WITH "idle" AND 6 AND null AND null

'Result: 1st elevator (c1A1) is sent'
CALL Press OF pressedCallButton2
CALL Press OF FloorButton in c1A1 Buttons WHICH has Floor OF 7





'SCENARIO 2'
SET pressedCallButton2 TO INSTANTIATE CallButton WITH 1 AND "up" AND 1

SET c1A2 TO 1st elevator in ElevatorList OF column1
SET c1B2 TO 2nd elevator in ElevatorList OF column1

CALL ChangeAttributesTEST OF c1A2 WITH "idle" AND 10 AND null AND null
CALL ChangeAttributesTEST OF c1B2 WITH "idle" AND 3 AND null AND null

'Result: 2nd elevator (c1B2) is sent'
CALL Press OF pressedCallButton2
CALL Press OF FloorButton in c1B2 Buttons WHICH has Floor OF 6

'=== 2 minutes later ==='

'Result: 2nd elevator (c1B2) is sent'
SET pressedCallButton3 TO INSTANTIATE CallButton WITH 3 AND "up" AND 1
CALL Press OF pressedCallButton3
CALL Press OF FloorButton in c1B2 Buttons WHICH has Floor OF 5

'=== After a bit more time ==='

'Result: 1st elevator (c1A2) is sent'
SET pressedCallButton4 TO INSTANTIATE CallButton WITH 9 AND "down" AND 1
CALL Press OF pressedCallButton4
CALL Press OF FloorButton in c1A2 Buttons WHICH has Floor OF 2





'SCENARIO 3'
SET pressedCallButton5 TO INSTANTIATE CallButton WITH 3 AND "down" AND 1

SET c1A3 TO 1st elevator in ElevatorList OF column1
SET c1B3 TO 2nd elevator in ElevatorList OF column1

CALL ChangeAttributesTEST OF c1A3 WITH "idle" AND 10 AND null AND null
CALL ChangeAttributesTEST OF c1B3 WITH "active" AND 3 AND 6 AND "up"

'Result: 1st elevator (c1A3) is sent'
CALL Press OF pressedCallButton2
CALL Press OF FloorButton in c1A3 Buttons WHICH has Floor OF 2

'=== 5 minutes later ==='

'Result: 2nd elevator (c1B3) is sent'
SET pressedCallButton6 TO INSTANTIATE CallButton WITH 10 AND "down" AND 1
CALL Press OF pressedCallButton3
CALL Press OF FloorButton in c1B3 Buttons WHICH has Floor OF 3

'============================================ END OF EXAMPLE SCENARIOS =============================================================================
